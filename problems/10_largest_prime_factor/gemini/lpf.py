# Generated by Gemini
def largest_prime_factor(n: int) -> int:
    """
    Returns the largest prime factor of n using optimized trial division.

    Assumes n > 1 and is not a prime.

    Optimization techniques:
    1. Handles factor 2 separately.
    2. Iterates only over odd numbers (i) up to the square root of n (i*i <= n).
    3. Continuously reduces n as factors are found, which speeds up the square root check.

    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    >>> largest_prime_factor(600851475143)
    6857
    """
    # Initialize the current largest factor found
    largest_factor = 1

    # --- Step 1 & 2: Handle the factor 2 ---
    # Continuously divide by 2 if possible, updating the largest factor
    while n % 2 == 0:
        largest_factor = 2
        n //= 2

    # --- Step 3: Iterate over odd divisors starting from 3 ---
    i = 3
    # Optimization: only check divisors up to sqrt(n).
    # If a factor larger than sqrt(n) exists, it must be the remaining n itself.
    while i * i <= n:
        if n % i == 0:
            # i is a prime factor; update the largest factor found so far
            largest_factor = i
            # Remove all occurrences of this factor
            while n % i == 0:
                n //= i
        
        # Check the next odd number
        i += 2

    # --- Step 4: Final Check for the remaining n ---
    # If the remaining n is greater than 2, it is the largest prime factor itself
    if n > 2:
        largest_factor = n

    return largest_factor